'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _wheelz = require('wheelz');

var _wheelz2 = _interopRequireDefault(_wheelz);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var PageWheelz = function (_Wheelz) {
    _inherits(PageWheelz, _Wheelz);

    function PageWheelz(options) {
        _classCallCheck(this, PageWheelz);

        // get container
        var $container = document.querySelector('[data-wheelz]');

        // report missing container
        if ($container == null) {
            console.error("Container with attribute 'data-wheelz' is required.");
            return _possibleConstructorReturn(_this);
        }

        // style container
        $container.style.cssText = '\n            position: fixed;\n            top: 0;\n            right: 0;\n            bottom: 0;\n            left: 0;\n            overflow: hidden;\n        ';

        var $sizer = document.createElement('div');
        $sizer.style.cssText = '\n            position: absolute;\n            top: 0;\n            left: 0;\n            width: 1px;\n            opacity: 0; \n            pointer-events: none;\n            height: ' + $container.scrollHeight + 'px;\n        ';

        document.body.appendChild($sizer);

        // disable original listeners
        var _this = _possibleConstructorReturn(this, (PageWheelz.__proto__ || Object.getPrototypeOf(PageWheelz)).call(this, $container, options));

        _this.element.removeEventListener('wheel', _this._wheelHandler);
        _this.element.removeEventListener('mousemove', _this._wheelHandler);
        _this.element.removeEventListener('touchmove', _this._wheelHandler);

        // mirror page scroll
        _this.kinet.set('y', window.scrollY);
        window.addEventListener('scroll', function (event) {
            _this.kinet.animate('y', window.scrollY);
        }, { passive: true });

        // propagate wheel event from window
        window.addEventListener('wheel', function (event) {
            if (window.scrollY + event.deltaY < 0 || window.scrollY + event.deltaY > _this.numbers.maxScroll) {
                // cancel scrolling of whole page on mac (doesn't work yet)
                // event.preventDefault();
                // event.stopPropagation();
                // event.stopImmediatePropagation();
            }
            _this.executeHandlers("wheel", event);
        }, { passive: true });

        // create new drag
        var dragHandler = function dragHandler(event) {
            var ev = void 0;
            if (event.type == "touchmove") {
                ev = event.touches[0];
            } else {
                ev = event;
            }

            if (_this.press.pressed) {
                _this.press.moved = true;
                var s = _this.press.atScroll + _this.press.y - ev.clientY;
                window.scrollTo(0, s);
                _this.executeHandlers("drag", ev);
            }
        };

        _this.element.addEventListener('mousemove', dragHandler, { passive: true });
        _this.element.addEventListener('touchmove', dragHandler, { passive: true });

        // save to instance
        _this.$container = $container;
        _this.$sizer = $sizer;
        return _this;
    }

    return PageWheelz;
}(_wheelz2.default);

exports.default = PageWheelz;