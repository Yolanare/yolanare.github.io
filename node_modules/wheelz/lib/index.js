'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _clickHandler = require('./clickHandler');

var _clickHandler2 = _interopRequireDefault(_clickHandler);

var _resizeHandler = require('./resizeHandler');

var _resizeHandler2 = _interopRequireDefault(_resizeHandler);

var _mouseDownHandler = require('./mouseDownHandler');

var _mouseDownHandler2 = _interopRequireDefault(_mouseDownHandler);

var _mouseUpHandler = require('./mouseUpHandler');

var _mouseUpHandler2 = _interopRequireDefault(_mouseUpHandler);

var _mouseMoveHandler = require('./mouseMoveHandler');

var _mouseMoveHandler2 = _interopRequireDefault(_mouseMoveHandler);

var _wheelHandler = require('./wheelHandler');

var _wheelHandler2 = _interopRequireDefault(_wheelHandler);

var _mouseEnterHandler = require('./mouseEnterHandler');

var _mouseEnterHandler2 = _interopRequireDefault(_mouseEnterHandler);

var _mouseLeaveHandler = require('./mouseLeaveHandler');

var _mouseLeaveHandler2 = _interopRequireDefault(_mouseLeaveHandler);

var _kinet = require('kinet');

var _kinet2 = _interopRequireDefault(_kinet);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Wheelz = function () {
    function Wheelz(element, options) {
        _classCallCheck(this, Wheelz);

        this.handlers = {
            stabilized: [],
            enable: [],
            disable: [],

            hitTop: [],
            hitBottom: [],
            click: [],

            dragStart: [],
            drag: [],
            dragEnd: [],

            pointerUp: [],
            pointerDown: [],
            pointerEnter: [],
            pointerLeave: [],

            resize: [],
            wheel: [],
            scroll: [],
            scrollStart: [],
            scrollEnd: []
        };
        this._presets = {
            "normal": [0.5, 0.2],
            "smooth": [0.3, 0.04],
            "instant": [0.55, 0.4],
            "bounce": [0.3, 0.08],
            "slow": [0.3, 0.02]
        };
        this._renderHandler = this.render.bind(this);
        this._clickHandler = _clickHandler2.default.bind(this);
        this._resizeHandler = _resizeHandler2.default.bind(this);
        this._mouseDownHandler = _mouseDownHandler2.default.bind(this);
        this._mouseUpHandler = _mouseUpHandler2.default.bind(this);
        this._mouseMoveHandler = _mouseMoveHandler2.default.bind(this);
        this._wheelHandler = _wheelHandler2.default.bind(this);
        this._mouseEnterHandler = _mouseEnterHandler2.default.bind(this);
        this._mouseLeaveHandler = _mouseLeaveHandler2.default.bind(this);

        // default options
        var defaults = {
            containerPadding: 0,
            draggable: false,
            friction: 0.3,
            acceleration: 0.04,
            preset: null
        };

        // merge options
        this.options = _extends({}, defaults, options);

        // apply presets if set
        if (this.options.preset !== null) {
            if (this.options.preset in this._presets) {
                this.options.friction = this._presets[this.options.preset][0];
                this.options.acceleration = this._presets[this.options.preset][1];
            } else {
                console.warn('Preset \'' + this.options.preset + '\' doesn\'t exist. Using set options instead.');
            }
        }

        // save source element
        this.element = element;

        // create kinet instance
        this.kinet = new _kinet2.default({
            names: ["x", "y"],
            acceleration: this.options.acceleration,
            friction: this.options.friction,
            test: function test(instance) {
                return Math.abs(instance.current - instance.target) >= .8;
            }
        });

        this.unlockedPropagation = 0;

        // important values
        this.numbers = {};

        // create press helper
        this.press = {
            pressed: false,
            moved: false
        };

        // enable wheelz
        this.enable();
    }

    _createClass(Wheelz, [{
        key: 'enable',
        value: function enable() {
            var _this = this;

            // styles
            this.element.style.overflow = "hidden";
            if (this.element.style.position === "") {
                this.element.style.position = "relative";
            }
            this.element.style.userDrag = "none";
            this.element.style.transform = "translateZ(0)";
            this.element.style.touchAction = "none";
            this.element.classList.add('wheelz');

            // get and count children
            this.children = this.element.children;
            this.childrenLength = this.children.length;

            // trigger resize
            this._resizeHandler();

            // wheel
            this.element.addEventListener('wheel', this._wheelHandler);

            if (this.options.draggable) {
                // drag
                this.element.addEventListener('mousedown', this._mouseDownHandler);
                window.addEventListener('mouseup', this._mouseUpHandler);
                window.addEventListener('mousemove', this._mouseMoveHandler, { passive: false });

                // touch drag
                this.element.addEventListener('touchstart', this._mouseDownHandler);
                window.addEventListener('touchend', this._mouseUpHandler);
                window.addEventListener('touchmove', this._mouseMoveHandler, { passive: false });
            }

            // helpers
            this.element.addEventListener('mouseenter', this._mouseEnterHandler);
            this.element.addEventListener('mouseleave', this._mouseLeaveHandler);
            this.element.addEventListener('click', this._clickHandler);
            window.addEventListener('resize', this._resizeHandler);

            // propagate events from kinet
            this.kinet.on('start', function () {
                _this.executeHandlers("scrollStart");
            });

            this.kinet.on('tick', function (instances) {
                _this.unlockedPropagation = 0;
                _this.executeHandlers("scroll", instances);
            });

            this.kinet.on('end', function () {
                _this.executeHandlers("scrollEnd");
                _this.executeHandlers("stabilized");

                if (_this.element.scrollTop === _this.numbers.maxScroll) {
                    _this.unlockedPropagation = 1;
                    _this.executeHandlers("hitBottom");
                } else if (_this.element.scrollTop === 0) {
                    _this.unlockedPropagation = -1;
                    _this.executeHandlers("hitTop");
                }
            });

            // enable rendering on tick
            this.on('scroll', this._renderHandler);
            this.kinet.set('y', this.element.scrollTop);

            this.executeHandlers("enable");
        }
    }, {
        key: 'disable',
        value: function disable() {
            // remove styles
            this.element.style.overflow = "";
            this.element.classList.remove('wheelz');
            this.element.style.touchAction = "";
            this.element.style.position = "";
            this.element.style.WebkitOverflowScrolling = 'touch';
            this.element.style.transform = "";

            // wheel
            this.element.removeEventListener('wheel', this._wheelHandler);

            if (this.options.draggable) {
                // drag
                this.element.removeEventListener('mousedown', this._mouseDownHandler);
                window.removeEventListener('mouseup', this._mouseUpHandler);
                window.removeEventListener('mousemove', this._mouseMoveHandler);

                // touch drag
                this.element.removeEventListener('touchstart', this._mouseDownHandler);
                window.removeEventListener('touchend', this._mouseUpHandler);
                window.removeEventListener('touchmove', this._mouseMoveHandler);
            }

            // helpers
            this.element.removeEventListener('mouseenter', this._mouseEnterHandler);
            this.element.removeEventListener('mouseleave', this._mouseLeaveHandler);
            this.element.addEventListener('click', this._clickHandler);
            window.removeEventListener('resize', this._resizeHandler);

            // disable handlers of kinet
            this.kinet.off();

            this.executeHandlers("disable");

            this.off();
        }
    }, {
        key: 'render',
        value: function render(instances) {
            this.element.scrollTop = instances.y.current;
        }
    }, {
        key: 'on',
        value: function on(event, handler) {
            if (this.handlers[event]) {
                this.handlers[event].push(handler);
            } else {
                console.warn('Unsupported event ' + event + '.');
            }
        }
    }, {
        key: 'off',
        value: function off(event, handler) {
            var _this2 = this;

            if (event != null) {
                if (handler != null) {
                    if (this.handlers[event] && this.handlers[event].filter(function (savedHandler) {
                        return savedHandler === handler;
                    }).length) {
                        var toRemove = this.handlers[event].filter(function (savedHandler) {
                            return savedHandler === handler;
                        })[0];
                        var index = this.handlers[event].indexOf(toRemove);
                        if (index > -1) {
                            this.handlers[event].splice(index, 1);
                        }
                    } else {
                        console.warn('Handler for event ' + event + ' no found.');
                    }
                } else {
                    this.handlers[event] = [];
                }
            } else {
                Object.keys(this.handlers).forEach(function (keys) {
                    _this2.handlers[keys] = [];
                });
            }
        }

        // event handlers

    }, {
        key: 'executeHandlers',
        value: function executeHandlers(event, originalEvent) {
            this.handlers[event].forEach(function (handler) {
                return handler(originalEvent);
            });
        }
    }]);

    return Wheelz;
}();

exports.default = Wheelz;